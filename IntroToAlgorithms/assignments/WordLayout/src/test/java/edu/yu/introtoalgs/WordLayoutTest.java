package edu.yu.introtoalgs;

import org.junit.Test;
import java.net.URISyntaxException;
import static edu.yu.introtoalgs.WordLayoutBase.*;
import static org.junit.Assert.*;
import edu.yu.introtoalgs.WordLayoutBase.*;
import edu.yu.introtoalgs.WordLayout.*;
import edu.yu.introtoalgs.WordLayoutTest.*;
import edu.yu.introtoalgs.*;
import java.io.*;
import java.util.*;
import java.net.URI;
import static org.junit.Assert.*;


public class WordLayoutTest {

    @Test
    public void primera() throws URISyntaxException, IOException {
        var n = 1;
        var na = 3;
        assertEquals(4, na + n);
    }

    @Test
    public void segunda() throws URISyntaxException, IOException {
        final int nRows = 5;
        final int nColumns = 5;
        final List<String> words = List.of("CAT", "ZZ", "WW", "aa", "qq", "DOG", "BOB", "MATI");
        final WordLayoutBase layout = new WordLayout(nRows, nColumns, words ) ;

        for (String word : words) {
            assertTrue(isWordInGrid(layout.getGrid().grid, word));
        }
    }

    @Test
    public void tercera() throws URISyntaxException, IOException {
        final int nRows = 5;
        final int nColumns = 5;
        final List<String> words = List.of("CAT", "DOG", "BOB", "aaa", "bbb", "Ccc", "Ddd", "Zz", "Yy");
        final WordLayoutBase layout = new WordLayout(nRows, nColumns, words ) ;

        for (String word : words) {
            assertTrue(isWordInGrid(layout.getGrid().grid, word));
        }
    }

    @Test
    public void rowsLargas() throws URISyntaxException, IOException {
        final int nRows = 2;
        final int nColumns = 7000;
        List<String> words = new ArrayList<>();
                words.add
        for (var i =- 0; i < 3500; i++){
            words.add("aa");
        }
        final WordLayoutBase layout = new WordLayout(nRows, nColumns, words ) ;

        for (String word : words) {
            assertTrue(isWordInGrid(layout.getGrid().grid, word));
        }
    }

    @Test
    public void ColumnsLargas() throws URISyntaxException, IOException {
        final int nRows = 7000;
        final int nColumns = 2;
        List<String> words = new ArrayList<>();
        words.add
        for (var i =- 0; i < 3500; i++){
            words.add("aa");
        }
        final WordLayoutBase layout = new WordLayout(nRows, nColumns, words ) ;

        for (String word : words) {
            assertTrue(isWordInGrid(layout.getGrid().grid, word));
        }
    }

    @Test
    public void probandoColumnas() throws URISyntaxException, IOException {
        final int nRows = 4;
        final int nColumns = 3;
        final List<String> words = List.of("CAT", "DOG", "AAAA", "Q");
        final WordLayoutBase layout = new WordLayout(nRows, nColumns, words ) ;
        for (String word : words) {
            assertTrue(isWordInGrid(layout.getGrid().grid, word));
        }
    }

    @Test
    public void probandoColumnas2() throws URISyntaxException, IOException {
        final int nRows = 5;
        final int nColumns = 3;
        final List<String> words = List.of("aa", "bb", "cc", "dd", "ee", "ff", "gg");
        final WordLayoutBase layout = new WordLayout(nRows, nColumns, words ) ;
        for (String word : words) {
            assertTrue(isWordInGrid(layout.getGrid().grid, word));
        }
    }

    @Test
    public void probandoBroken(){

        String[] aa = {"TFBEZBZSILHOEAQJSFFMLDB", "IDOSTJJFHLPXOVCIJGDGXTJYIQSUO", "TJJBKMBDTMGNNNICWEBPMW", "RCHMTIEFGJXPRDYNHZPXSUUKGVEK", "IOPNYZUZSQSJXJCGUZBMK", "RNNISGEMQPRBGINQEHRARNENCDZ", "XHODIYNSLVCTBZLYSCOX", "PQZQVXNUYOKYUCVHKFHOEJUDAK", "IYSRWEEFNSEPLJOLBUA", "LPXZBHUIBKFRGFAXBBAUETUEY", "BGRSVHTDZKENZLPSYS", "BVNUKPNSNUDFAEUAJRSBPMBZ", "NXRCXPVYJCPGFANMU", "GSQXAZFQBWFLNGOHQYXEDZE", "AIUJGHTWXSXOEDBH", "CONTKYLTCIJHNGONGFWZAB", "FHBSLPGIIWUHWPD", "NQGVRJZTYGARKFJIZBDSW", "VPTRMNYTLOCBCP", "ILZQCZURCQUEYBDPIDQY", "XLXTQDOIQSUAW", "DJUQWWKLWDSTZFGLWUH", "SHRIWZYDGIKZ", "KNCYUWWKAKECAAKSML", "GSZDMHDDYKD", "UYBLRNBHTGUVOMLLC", "SQXHRTXERD", "XWQHXTOEBTDWENHS", "SYJSVTJJH", "XEZSAIKXDKSJSVT", "BGDWDAEQ", "BLRWLEAKUULEIK", "NAGQGPM", "TUEQLRLFNVVCO", "MDYVUG", "ZCQOMPSHVKEO", "EUBSI", "BVNKXTWWDTB", "EYLT", "JSILBLLJYP", "ANV", "UCWQGVMDX", "OE", "DANGYICO", "G", "AQZQIPL"};
        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        WordLayout wordLayout = new WordLayout(20, 40, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);

        for (String word : list) {
            System.out.println(counter);
            assertTrue(isWordInGrid(grid, word));
            counter++;
        }
    }

    @Test
    public void probandoBrokenInverso(){

        String[] aa = {"TFBEZBZSILHOEAQJSFFMLDB", "IDOSTJJFHLPXOVCIJGDGXTJYIQSUO", "TJJBKMBDTMGNNNICWEBPMW", "RCHMTIEFGJXPRDYNHZPXSUUKGVEK", "IOPNYZUZSQSJXJCGUZBMK", "RNNISGEMQPRBGINQEHRARNENCDZ", "XHODIYNSLVCTBZLYSCOX", "PQZQVXNUYOKYUCVHKFHOEJUDAK", "IYSRWEEFNSEPLJOLBUA", "LPXZBHUIBKFRGFAXBBAUETUEY", "BGRSVHTDZKENZLPSYS", "BVNUKPNSNUDFAEUAJRSBPMBZ", "NXRCXPVYJCPGFANMU", "GSQXAZFQBWFLNGOHQYXEDZE", "AIUJGHTWXSXOEDBH", "CONTKYLTCIJHNGONGFWZAB", "FHBSLPGIIWUHWPD", "NQGVRJZTYGARKFJIZBDSW", "VPTRMNYTLOCBCP", "ILZQCZURCQUEYBDPIDQY", "XLXTQDOIQSUAW", "DJUQWWKLWDSTZFGLWUH", "SHRIWZYDGIKZ", "KNCYUWWKAKECAAKSML", "GSZDMHDDYKD", "UYBLRNBHTGUVOMLLC", "SQXHRTXERD", "XWQHXTOEBTDWENHS", "SYJSVTJJH", "XEZSAIKXDKSJSVT", "BGDWDAEQ", "BLRWLEAKUULEIK", "NAGQGPM", "TUEQLRLFNVVCO", "MDYVUG", "ZCQOMPSHVKEO", "EUBSI", "BVNKXTWWDTB", "EYLT", "JSILBLLJYP", "ANV", "UCWQGVMDX", "OE", "DANGYICO", "G", "AQZQIPL"};
        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        WordLayout wordLayout = new WordLayout(40, 20, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);

        for (String word : list) {
            System.out.println(counter);
            assertTrue(isWordInGrid(grid, word));
            counter++;
        }
    }

    @Test
    public void probandoBroken2(){

        String[] aa = {"aaaaaaaaaaaaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbbbbbbbbbbb", "ccccccccccccccccccccccc", "eeeeeeeeeeeeeeeeeeeeeeee", "ffffffffffffffffffffff", "ggggggggggggggggggggggg", "hhhhhhhhhhhhhhhhhhhhh", "iiiiiiiiiiiiiiiiiiiiii", "jjjjjjjjjjjjjjjjjjjj", "kkkkkkkkkkkkkkkkkkkkk", "hhhhhhhhhhhhhhhhhhh", "llllllllllllllllllll", "mmmmmmmmmmmmmmmmmm", "nnnnnnnnnnnnnnnnnnn", "ooooooooooooooooo", "pppppppppppppppppp", "qqqqqqqqqqqqqqqq", "rrrrrrrrrrrrrrrrr", "sssssssssssssss", "tttttttttttttttt", "uuuuuuuuuuuuuu", "vvvvvvvvvvvvvvv", "wwwwwwwwwwwww", "xxxxxxxxxxxxxx", "yyyyyyyyyyyy", "zzzzzzzzzzzzz", "AAAAAAAAAAA", "BBBBBBBBBBBB", "CCCCCCCCCC", "DDDDDDDDDDD", "EEEEEEEEE", "FFFFFFFFFF", "GGGGGGGG", "HHHHHHHHH", "IIIIIII", "JJJJJJJJ", "KKKKKK", "LLLLLLL", "MMMMM", "NNNNNN", "OOOO", "PPPPP", "QQQ", "RRRR", "SS", "TTT", "U", "VV"};
        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        WordLayout wordLayout = new WordLayout(24, 26, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);

    for (var i : list){
            final List<LocationBase> locations = wordLayout.locations(i);
        System.out.println(locations);
        }

        for (String word : list) {
            System.out.println(counter);
            assertTrue(isWordInGrid(grid, word));
            counter++;
        }

    }

    @Test
    public void probandoBroken2Inverso(){

        String[] aa = {"aaaaaaaaaaaaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbbbbbbbbbbb", "ccccccccccccccccccccccc", "eeeeeeeeeeeeeeeeeeeeeeee", "ffffffffffffffffffffff", "ggggggggggggggggggggggg", "hhhhhhhhhhhhhhhhhhhhh", "iiiiiiiiiiiiiiiiiiiiii", "jjjjjjjjjjjjjjjjjjjj", "kkkkkkkkkkkkkkkkkkkkk", "hhhhhhhhhhhhhhhhhhh", "llllllllllllllllllll", "mmmmmmmmmmmmmmmmmm", "nnnnnnnnnnnnnnnnnnn", "ooooooooooooooooo", "pppppppppppppppppp", "qqqqqqqqqqqqqqqq", "rrrrrrrrrrrrrrrrr", "sssssssssssssss", "tttttttttttttttt", "uuuuuuuuuuuuuu", "vvvvvvvvvvvvvvv", "wwwwwwwwwwwww", "xxxxxxxxxxxxxx", "yyyyyyyyyyyy", "zzzzzzzzzzzzz", "AAAAAAAAAAA", "BBBBBBBBBBBB", "CCCCCCCCCC", "DDDDDDDDDDD", "EEEEEEEEE", "FFFFFFFFFF", "GGGGGGGG", "HHHHHHHHH", "IIIIIII", "JJJJJJJJ", "KKKKKK", "LLLLLLL", "MMMMM", "NNNNNN", "OOOO", "PPPPP", "QQQ", "RRRR", "SS", "TTT", "U", "VV"};
        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        WordLayout wordLayout = new WordLayout(26, 24, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);

        for (var i : list){
            final List<LocationBase> locations = wordLayout.locations(i);
            System.out.println(locations);
        }

        for (String word : list) {
            System.out.println(counter);
            assertTrue(isWordInGrid(grid, word));
            counter++;
        }

    }

    @Test
    public void probandoBroken3(){

       // String[] aa = {"LM", "F", "C", "", ""};
        String[] aa = {"LM", "F", "C"};
        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        System.out.println(list);


        WordLayout wordLayout = new WordLayout(2, 2, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);


        for (String word : list) {
            System.out.println(counter);
            assertTrue(isWordInGrid(grid, word));
            counter++;
        }
    }

    @Test
    public void elQueNOAnda(){

        String[] aa = {"aaaa", "bbbb", "cccc", "dddd", "eee", "fff", "ggg"};
        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        System.out.println(list);

        WordLayout wordLayout = new WordLayout(5, 5, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);

        for (String word : list) {
            System.out.println(counter);
            assertTrue(isWordInGrid(grid, word));
            counter++;
        }
    }

    @Test
    public void testingExceptions() throws URISyntaxException, IOException {
        final int nRows = 4;
        final int nColumns = 4;
        final List<String> words = List.of("CAT", "DOG", "BOB", "aaa", "bbb", "Ccc", "Ddd", "Zz", "Yy");
        final List<String> words2 = List.of("CAT", "DOG", "QQQQq");
        final List<String> words3 = List.of("CAT", "DOG", "QQQQ");
        final List<String> words4 = List.of();
        final List<String> words5 = List.of("cat", "");
        final List<String> words6 = List.of("cat", "d d");
        final List<String> words7 = List.of("cat", " d ");
        final List<String> words8 = List.of("cat", "d-d");



        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words2);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(0, nColumns, words3);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(0, nColumns, words3);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, 0, words3);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words4);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, null);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words5);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words6);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words7);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}
        try {
            final WordLayoutBase layout = new WordLayout(nRows, nColumns, words8);
            throw new RuntimeException();
        } catch (IllegalArgumentException e){}

    }


    @Test
    public void probandoLeff1(){

        String[] aa = {"DIAMENT", "LEFF", "WYMORE", "JEKYL", "HYDE", "ALGS", "MDM", "DBIMPL", "DS", "INTRO"};

        List<String> list = new ArrayList<>();
        for (var i : aa){
            list.add(i);
        }

        WordLayout wordLayout = new WordLayout(7, 7, list);
        char[][] grid = wordLayout.getGrid().grid;
        int counter = 0;
        System.out.println(counter);

        for (var i : list){
            final List<LocationBase> locations = wordLayout.locations(i);
            System.out.println(locations);
        }

        for (String word : list) {
            System.out.println(counter);
      //      assertTrue(isWordInGrid(grid, word));
            counter++;
        }

        System.out.println(wordLayout.getGrid().toString());

    }

    private boolean isWordInGrid(char[][] grid, String word) {
        return searchHorizontally(grid, word) || searchVertically(grid, word);
    }

    private boolean searchHorizontally(char[][] grid, String word) {
        for (int i = 0; i < grid.length; i++) {
            String rowStr = new String(grid[i]);
            if (rowStr.contains(word)) return true;
        }
        return false;
    }

    private boolean searchVertically(char[][] grid, String word) {
        for (int i = 0; i < grid[0].length; i++) {
            StringBuilder colStr = new StringBuilder();
            for (int j = 0; j < grid.length; j++) {
                colStr.append(grid[j][i]);
            }
            if (colStr.toString().contains(word)) return true;
        }
        return false;
    }
}


